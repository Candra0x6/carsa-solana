'use client';

import React, { useState, useRef } from 'react';
import jsPDF from 'jspdf';
import Image from 'next/image';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Merchant } from '@/types/merchant';

interface QRCodeModalProps {
  merchant: Merchant;
  children: React.ReactNode;
}

export default function QRCodeModal({ merchant, children }: QRCodeModalProps) {
  const [isDownloading, setIsDownloading] = useState(false);
  const qrCodeRef = useRef<HTMLDivElement>(null);

  // Use merchant's existing QR code URL
  const qrCodeUrl = merchant.qrCodeUrl;
  const fallbackUrl = `https://carsa.app/merchant/${merchant.id}`;

  // Convert image URL to data URL for downloading
  const convertImageToDataUrl = async (imageUrl: string): Promise<string> => {
    return new Promise((resolve, reject) => {
      const img = new window.Image();
      img.crossOrigin = 'anonymous';
      img.onload = () => {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        if (!ctx) {
          reject(new Error('Could not get canvas context'));
          return;
        }
        
        canvas.width = img.width;
        canvas.height = img.height;
        ctx.drawImage(img, 0, 0);
        
        try {
          const dataUrl = canvas.toDataURL('image/png');
          resolve(dataUrl);
        } catch (error) {
          reject(error);
        }
      };
      img.onerror = () => reject(new Error('Failed to load image'));
      img.src = imageUrl;
    });
  };

  const downloadAsImage = async () => {
    if (!qrCodeUrl) return;

    try {
      setIsDownloading(true);
      const dataUrl = await convertImageToDataUrl(qrCodeUrl);
      
      const link = document.createElement('a');
      link.download = `${merchant.name.replace(/\s+/g, '_')}_QR_Code.png`;
      link.href = dataUrl;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error('Error downloading image:', error);
    } finally {
      setIsDownloading(false);
    }
  };

  const downloadAsPDF = async () => {
    if (!qrCodeUrl) return;

    try {
      setIsDownloading(true);
      
      // Convert QR code image to data URL
      const dataUrl = await convertImageToDataUrl(qrCodeUrl);
      
      // Create PDF
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });

      // Add title
      pdf.setFontSize(20);
      pdf.setTextColor(0, 0, 0);
      pdf.text('Merchant QR Code', 20, 30);

      // Add merchant info
      pdf.setFontSize(14);
      pdf.text(`Business: ${merchant.name}`, 20, 50);
      pdf.text(`Category: ${merchant.category}`, 20, 60);
      pdf.text(`Cashback Rate: ${merchant.cashbackRate}%`, 20, 70);
      
      // Add QR code image
      const imgWidth = 80;
      const imgHeight = 80;
      pdf.addImage(dataUrl, 'PNG', 20, 80, imgWidth, imgHeight);

      // Add instructions
      pdf.setFontSize(10);
      pdf.text('Instructions:', 20, 180);
      pdf.text('1. Show this QR code to customers for payment', 20, 190);
      pdf.text('2. Customers scan with Carsa app to make payments', 20, 200);
      pdf.text('3. Cashback is automatically processed', 20, 210);

      // Add wallet address (truncated)
      pdf.setFontSize(8);
      pdf.text(`Wallet: ${merchant.walletAddress.slice(0, 8)}...${merchant.walletAddress.slice(-8)}`, 20, 230);
      pdf.text(`QR Code URL: ${fallbackUrl}`, 20, 240);

      // Add footer
      pdf.setFontSize(8);
      pdf.setTextColor(100, 100, 100);
      pdf.text('Generated by Carsa - Solana Cashback Platform', 20, 280);
      
      // Save PDF
      pdf.save(`${merchant.name.replace(/\s+/g, '_')}_QR_Code.pdf`);
      
    } catch (error) {
      console.error('Error generating PDF:', error);
    } finally {
      setIsDownloading(false);
    }
  };
  console.log('merchant', merchant);
  return (
    <Dialog >
      <DialogTrigger asChild>
        {children}
      </DialogTrigger>
      <DialogContent className="bg-[#131316] rounded-[24px] shadow-[0px_32px_64px_-16px_#0000004c,0px_16px_32px_-8px_#0000004c,0px_8px_16px_-4px_#0000003d,0px_4px_8px_-2px_#0000003d,0px_-8px_16px_-1px_#00000029,0px_2px_4px_-1px_#0000003d,0px_0px_0px_1px_#000000,inset_0px_0px_0px_1px_#ffffff14,inset_0px_1px_0px_#ffffff33] text-white">
        <DialogHeader>
          <DialogTitle className="text-center text-white">Merchant QR Code</DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* QR Code Display */}
          <div ref={qrCodeRef} className="flex flex-col items-center space-y-4 p-6 bg-white rounded-xl">
            {qrCodeUrl ? (
              <Image 
                src={qrCodeUrl} 
                alt="Merchant QR Code"
                width={300}
                height={300}
                className="rounded-lg"
              />
            ) : (
              <div className="w-[300px] h-[300px] flex items-center justify-center bg-gray-100 rounded-lg text-gray-500">
                <div className="text-center">
                  <p className="mb-2">No QR Code available</p>
                  <p className="text-sm">QR Code URL: {fallbackUrl}</p>
                </div>
              </div>
            )}
            
            {/* Merchant Info */}
            <div className="text-center space-y-1">
              <h3 className="font-bold text-gray-900">{merchant.name}</h3>
              <p className="text-sm text-gray-600">{merchant.category}</p>
              <p className="text-sm font-medium text-green-600">{merchant.cashbackRate}% Cashback</p>
            </div>
          </div>

          {/* Instructions */}
          <Card variant="surface" className="p-4">
            <h4 className="font-medium text-white mb-3 flex items-center gap-2">
              <svg className="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              How to use this QR Code
            </h4>
            <ul className="text-sm text-gray-300 space-y-2">
              <li className="flex items-start gap-2">
                <span className="text-blue-400 font-bold">1.</span>
                <span>Display this QR code at your checkout counter</span>
              </li>
              <li className="flex items-start gap-2">
                <span className="text-blue-400 font-bold">2.</span>
                <span>Customers scan with their Carsa app to make payments</span>
              </li>
              <li className="flex items-start gap-2">
                <span className="text-blue-400 font-bold">3.</span>
                <span>Cashback is automatically processed for each transaction</span>
              </li>
            </ul>
          </Card>

          {/* Download Options */}
          <div className="grid grid-cols-2 gap-3">
            <Button
              variant="primary"
              onClick={downloadAsImage}
              disabled={!qrCodeUrl || isDownloading}
              className="flex items-center gap-2"
            >
              {isDownloading ? (
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              ) : (
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              )}
              Download PNG
            </Button>
            
            <Button
              variant="primary"
              onClick={downloadAsPDF}
              disabled={!qrCodeUrl || isDownloading}
              className="flex items-center gap-2"
            >
              {isDownloading ? (
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              ) : (
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              )}
              Download PDF
            </Button>
          </div>

          {/* Additional Info */}
          <div className="text-xs text-gray-400 text-center space-y-1">
            <p>QR Code URL: {qrCodeUrl || fallbackUrl}</p>
            <p>Wallet: {merchant.walletAddress.slice(0, 8)}...{merchant.walletAddress.slice(-8)}</p>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
